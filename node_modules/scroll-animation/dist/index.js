'use strict';

var requestAnimationFrame = require('raf');
var getMaxY = require('get-scrollmax-y');
var window = require('global/window');

var animate = function animate(animations) {
	for (var i = 0; i < animations.length; i++) {
		var a = animations[i];
		if ('number' !== typeof a.from) a.from = 0;
		if ('number' !== typeof a.to) a.to = 1;
		if ('function' !== typeof a.fn) {
			throw new Error('animation ' + i + ' has no function');
		}
	}

	var lastY = NaN;
	var calls = 0;
	var update = function update() {
		var y = window.pageYOffset;
		if (y === undefined) {
			y = (document.documentElement || document.body.parentNode || document.body).scrollTop;
		}

		if (y !== lastY) {
			lastY = y;
			var maxY = getMaxY();
			var p = maxY > 0 ? y / maxY : 0;

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var _a = _step.value;

					if (p < _a.from) _a.fn(0, y, maxY);else if (p > _a.to) _a.fn(1, y, maxY);else _a.fn((p - _a.from) / (_a.to - _a.from), y, maxY);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}

		if (++calls < 100) requestAnimationFrame(update);
	};

	window.addEventListener('scroll', function () {
		if (calls >= 100) requestAnimationFrame(update);
		calls = 0;
	});

	requestAnimationFrame(update);
};

module.exports = animate;